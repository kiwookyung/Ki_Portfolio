export const projects = [
  {
    id: 1,
    title: "ReeLoom - 영화 추천 기반 커뮤니티 웹 서비스",
    description: "Vue + Django 기반의 영화 추천 및 커뮤니티 통합 웹 서비스",
    longDescription:
      "ReeLoom은 영화 추천과 커뮤니티 기능을 결합한 영화 웹 서비스입니다. TMDB 기반의 영화 데이터를 활용하고, 날씨/평점 기반 추천 알고리즘과 GPT-4o 기반 생성형 AI 챗봇을 통해 사용자에게 맞춤형 경험을 제공합니다. Django REST Framework와 Vue 3의 SPA 구조를 통해 프론트엔드와 백엔드를 효율적으로 연결했습니다.",
    role: "팀장 / 프론트엔드 개발, 추천 알고리즘 설계, 전체 구조 총괄",
    tech: [
      "Vue 3",
      "Pinia",
      "Django REST Framework",
      "Axios",
      "TMDB API",
      "OpenAI GPT-4o",
      "YouTube API",
    ],
    image: "/public/images/reeloom.png",
    github: "https://github.com/kiwookyung/SSAFY_first_PJT",
    period: "2025.04 - 2025.05",
    teamSize: "2명 (프론트엔드 1, 백엔드 1)",
    achievements: [
      "날씨 및 평점 기반 추천 알고리즘 구현",
      "GPT-4o 기반 영화 챗봇 기능 추가",
      "Vue 3 + Django REST Framework 연동",
      "커뮤니티 게시글/댓글/좋아요 기능 완성",
      "TMDB API로 약 2,000개 영화 데이터 처리",
    ],
    challenges: [
      "Vue와 Django 간의 CORS 및 데이터 구조 차이 해결",
      "Pinia 상태 관리 최적화를 통한 API 호출 최소화",
      "추천 알고리즘의 정확도를 높이기 위한 데이터 전처리",
      "GPT-4o 응답 포맷을 UX 친화적으로 개선",
    ],
  },
  {
    id: 2,
    title: "FloodGuard - 지능형 침수 예방 자동화 시스템",
    description: "AIoT 기반 실시간 침수 감지·예측·자동 제어 대시보드 웹 서비스",
    longDescription:
      "FloodGuard는 도심 침수 피해를 예방하기 위한 AIoT 통합 시스템으로, Jetson AI 기반 침수 감지, 예측 모델을 통한 위험도 분석, Raspberry Pi와 연동된 차수막 자동 제어를 제공합니다. React 기반 대시보드를 통해 CCTV 스트리밍, 실시간 로그 및 예측 데이터를 시각화하며, FastAPI 서버와 WebSocket을 통해 양방향 통신을 구현했습니다.",
    role: "팀장 / 프론트엔드 총괄, UI·UX 설계, 대시보드 구현, 실시간 모니터링 및 제어 시스템 개발",
    tech: [
      "React",
      "Vite",
      "MUI",
      "Tailwind CSS",
      "Zustand",
      "Recharts",
      "Leaflet (OpenStreetMap)",
      "FastAPI",
      "SQLAlchemy",
      "PostgreSQL",
      "Redis",
      "Docker Compose",
      "Traefik",
      "AWS EC2",
      "WebSocket",
      "JWT",
    ],
    image: "/images/floodguard.png",
    github: "https://github.com/kiwookyung/floodguard",
    period: "2025.07 - 2025.08",
    teamSize: "6명 (Frontend 1, Backend 1, AI/IoT 4)",
    achievements: [
      "AI + IoT + Web 통합형 침수 예방 시스템 구현",
      "Jetson 기반 실시간 침수 감지 및 예측 모델 적용",
      "Leaflet 기반 실시간 지도 시각화 및 제어 대시보드 구현",
      "WebSocket을 통한 CCTV 스트리밍 및 실시간 경보 로그 처리",
      "Docker + AWS EC2 환경에서 서비스 배포",
    ],
    challenges: [
      "MQTT 및 WebSocket 지연 문제 → Nginx 버퍼 및 QoS 설정 최적화",
      "실시간 데이터 동기화 로직 개선으로 WebSocket 안정성 확보",
      "FastAPI ↔ React 간 인증 구조 개선(JWT 기반 세션 유지)",
      "대용량 예측 로그 시각화 시 Recharts 성능 병목 해결",
    ],
    demo: "https://github.com/user-attachments/assets/872baf68-da39-4601-bd88-3d0801a9079a",
    tags: ["AIoT", "React", "FastAPI", "Real-time", "Team Project"],
  },
  {
    id: 3,
    title: "OrakGarak - 빅데이터 기반 음성 맞춤형 음악 추천 플랫폼",
    description:
      "음성 분석과 데이터 기반으로 맞춤형 노래를 추천하는 AI 음악 플랫폼",
    longDescription:
      "OrakGarak은 사용자의 음성을 분석하여 음역대·음색에 맞는 노래를 추천하고, 개인 맞춤형 앨범을 제작할 수 있는 AI 기반 음악 추천 플랫폼입니다. Web Audio API와 빅데이터 분석을 활용해 사용자의 보컬 특성을 시각화하고, Gemini Image API를 통해 AI가 생성한 앨범 커버를 제공합니다. Spring Boot, FastAPI, React, TypeScript 등 다양한 기술 스택이 결합된 풀스택 프로젝트입니다.",
    role: "프론트엔드 개발 (UI/UX 설계, 오디오 처리, 추천 및 앨범 제작 기능 구현)",
    tech: [
      "React 18",
      "TypeScript",
      "Vite",
      "TailwindCSS",
      "MUI",
      "Framer Motion",
      "Zustand",
      "Axios",
      "Spring Boot 3.3",
      "MySQL",
      "Redis",
      "FastAPI",
      "PyTorch",
      "Whisper API",
      "Gemini Image API",
      "Docker",
      "Jenkins",
      "AWS EC2/S3/RDS",
      "Nginx",
    ],
    image: "/images/orakgarak.png",
    github: "https://github.com/kiwookyung/orakgarak",
    period: "2025.08 - 2025.09",
    teamSize: "6명 (Frontend 2, Backend 3, Data/AI 1, DevOps 1)",
    achievements: [
      "음성 분석 기반 맞춤형 음악 추천 알고리즘 구현",
      "AI 앨범 커버 생성 기능(Gemini Image API) 적용",
      "Web Audio API로 실시간 녹음 및 시각화 구현",
      "3D 캐러셀 및 애니메이션 최적화를 통한 고품질 UX 구현",
      "Spring Boot + FastAPI + React 통합 아키텍처 완성",
    ],
    challenges: [
      "Web Audio API 브라우저 호환성 문제 → Safari 지원 및 AudioContext 제어 로직 개선",
      "JWT 인증 토큰 갱신 중 동시 요청 처리 → 요청 큐 시스템으로 해결",
      "3D 캐러셀 성능 저하 → GPU 가속 및 memoization 적용으로 프레임 저하 방지",
      "복잡한 상태 관리 구조(Zustand + TanStack Query) 최적화 및 캐싱 전략 수립",
    ],
    demo: "https://www.youtube.com/watch?v=TZXWQVrrv0A",
    tags: [
      "AI",
      "Music",
      "BigData",
      "React",
      "Spring Boot",
      "FastAPI",
      "Team Project",
    ],
  },
  {
    id: 4,
    title: "개인 포트폴리오 웹사이트",
    description: "React + Tailwind CSS로 구축한 인터랙티브 포트폴리오",
    longDescription:
      "React와 Tailwind CSS를 활용하여 제작한 개인 포트폴리오 웹사이트입니다. Intersection Observer API 기반 스크롤 애니메이션, 타이핑 효과, 3D 호버 이펙트 등 다양한 인터랙티브 요소를 구현하여 사용자 경험을 극대화했습니다. 4개의 주요 페이지(Home, About, Projects, Extras)와 10개 이상의 섹션 컴포넌트로 구성되어 있으며, 완전한 반응형 디자인으로 모든 디바이스에서 최적화된 화면을 제공합니다.",
    role: "기획 · 디자인 · 프론트엔드 전반 구현 (구조 설계, UI 컴포넌트화, 애니메이션 구현)",
    tech: [
      "React 19",
      "Vite",
      "React Router v7",
      "Tailwind CSS",
      "PostCSS",
      "Lucide Icons",
      "Intersection Observer API",
      "ESLint",
      "Git",
    ],
    image: null, // TODO: 프로젝트 완성 후 스크린샷 추가 예정
    github: "https://github.com/kiwookyung/Ki_Portfolio",
    period: "2025.09 - 2025.10",
    teamSize: "1명 (개인 프로젝트)",
    achievements: [
      "다양한 애니메이션 효과를 통한 인터랙티브 UX 구현",
      "모든 디바이스에 대응하는 완전 반응형 레이아웃 설계",
      "컴포넌트 기반 설계로 재사용성 및 유지보수성 향상",
      "10개 이상의 모듈화된 섹션 컴포넌트 구조 완성",
      "커스텀 Intersection Observer 훅으로 성능 최적화",
    ],
    challenges: [
      "Tailwind Utility 클래스가 많아지며 코드 가독성 저하 → 커스텀 컴포넌트 구조로 해결",
      "스크롤 애니메이션 성능 최적화 → Intersection Observer 커스텀 훅 구현으로 효율화",
      "프로젝트 데이터 구조 설계 → 확장 가능한 JSON 기반 데이터 관리 체계 구축",
    ],
    demo: "https://kiwookyung.github.io/",
    tags: ["Frontend", "React", "Tailwind CSS", "Personal"],
  },
];
